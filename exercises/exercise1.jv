pipeline AirportsPipeline{

    AirportsExtractor
        -> AirportsTextInterpreter
        -> AirportsCSVInterpreter
        -> AirportsTableInterpreter
        -> AirportsLoader;

	// This is the URL where the file will be downloaded from.
    block AirportsExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    // The output of the HttpExtractor will be interpreted as a text file.
    block AirportsTextInterpreter oftype TextFileInterpreter {}

    // Next, we interpret the text file as a csv sheet.
    block AirportsCSVInterpreter oftype CSVInterpreter {
        enclosing: '';
        delimiter: ";";
    }

	// The next step is to interpret the sheet as a table by adding structure.
	// For each column, we define a value type that specifies the data type.
	// Rows containing values that are not valid according to their value types are automatically omitted.
    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype text,
            "ICAO" oftype text,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer,
            "Zeitzone" oftype decimal,
            "DST" oftype text,
            "Zeitzonen-Datenbank" oftype text,
            "geo_punkt" oftype text
        ];
    }

	// As a last step, we load the table into a sink (sqlite file).
	// The structural information of the table is used to generate the correct table.
    block AirportsLoader oftype SQLiteLoader {
        table: "airports";
        file: "./airports.sqlite";
    }
}
