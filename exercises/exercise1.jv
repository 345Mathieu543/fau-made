pipeline AirportsPipeline{

	// Here, we specify the URL where the file shall be downloaded from.
    block AirportsExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    // The output of the HttpExtractor has to be interpreted, e.g., as text file.
    block AirportsTextInterpreter oftype TextFileInterpreter {}

    // Next, we interpret the text file as sheet.
	// A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block AirportsCSVInterpreter oftype CSVInterpreter {
        enclosing: '';
        delimiter: ";";
    }

	// As a next step, we interpret the sheet as a table by adding structure.
	// We define a value type per column that specifies the data type of the column.
	// Rows that include values that are not valid according to the their value types are dropped automatically.
    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Lfd. Nummer" oftype integer,
            "Name des Flughafens" oftype text,
            "Ort" oftype text,
            "Land" oftype text,
            "IATA" oftype text,
            "ICAO" oftype text,
            "Latitude" oftype decimal,
            "Longitude" oftype decimal,
            "Altitude" oftype integer,
            "Zeitzone" oftype decimal,
            "DST" oftype text,
            "Zeitzonen-Datenbank" oftype text,
            "geo_punkt" oftype text
        ];
    }

	// As a last step, we load the table into a sink,
	// here into a sqlite file!
	// The structural information of the table is used
	// to generate the correct table.
    block AirportsLoader oftype SQLiteLoader {
        table: "airports";
        file: "./airports.sqlite";
    }

    AirportsExtractor
        -> AirportsTextInterpreter
        -> AirportsCSVInterpreter
        -> AirportsTableInterpreter
        -> AirportsLoader;

}